
% Payload, Speed, Fleet Size
% MAYBE ADD loading rate, unloading rate, load threshold
lb = [2,   20, 1, 0]; % , 0.001,
ub = [30, 100, 5, 1];
options = optimset('Display','off');
disp("Beginning Optimization...")
for i = 1:2000 % run GA multiple times to determine result
%     [xGA_nl(:,i),fGA_nl(i)] = ga(@airship_surrogate_model, length(lb),[],[],[],[],lb,ub,@nlc);
    [xGA_nl(:,i),fGA_nl(i)] = ga(@airship_surrogate_model, length(lb),[],[],[],[],lb,ub,[],options); % seems reasonable
%     xGA_nl(:,i) = fmincon(@airship_surrogate_model,lb,[],[],[],[],lb,ub); % not good
end
[mv,mi] = mink(fGA_nl,10);
minbest = xGA_nl(:,mi)
MEANBEST = round(mean(minbest,2))
meanbest2 = round(mean(round(minbest),2))


figure(1)
plot(1:length(xGA_nl),xGA_nl(1,:))
title('payload')
figure(2)
plot(1:length(xGA_nl),xGA_nl(2,:))
title('speed')
figure(3)
plot(1:length(xGA_nl),xGA_nl(3,:))
title('fleet')
figure(4)
plot(1:length(xGA_nl),xGA_nl(4,:))
title('threshold')
figure(5)
plot(1:length(fGA_nl),fGA_nl)
title('f val')

% format bank
% nlc([5,59,2])

function f = airship_surrogate_model(x)
wB = -0.0; % minimize Impact to Boat Jobs (B/C it's already negative)
wC = -0.0; % maximize Impact to Crops
wF =  0.0; % minimize Impact to Forest
wI = -0.0; % maximize Impact to Farmer Income
wT = -1.0; % maximize Impact to Farmer Time
PAYLOAD = round(x(1));
CRUISESPEED = round(x(2));
FLEETSIZE = round(x(3));
LOADTHRESHOLD = x(4);
if PAYLOAD == 2 && CRUISESPEED == 20 && FLEETSIZE == 4 && LOADTHRESHOLD > 0.5 && LOADTHRESHOLD < 0.53
    stophere = 1;
end

% Neural Models
H2_1 = tanh((0.598688098438759 + 0.000185183111190431 * CRUISESPEED + -0.0101092928721037 * FLEETSIZE + 0.140590584713887 * LOADTHRESHOLD + -0.378183378769835 * PAYLOAD));

H2_2 = tanh((-3.14538406896965 + 0.0267707757980208 * CRUISESPEED + 0.647951977094716 * FLEETSIZE + 0.492521650936393 * LOADTHRESHOLD + -0.152782793658617 * PAYLOAD));

H2_3 = tanh((6.23007887913887 + -0.021586661616566 * CRUISESPEED + -3.16385516802729 * FLEETSIZE + -0.123077724727142 * LOADTHRESHOLD + -0.0384211679189942 * PAYLOAD));

H2_4 = tanh((4.61748784982379 + -0.100283612159577 * CRUISESPEED + -0.468662745987902 * FLEETSIZE + -0.348831028382243 * LOADTHRESHOLD + 0.0383566169307924 * PAYLOAD));

H1_1 = tanh((-1.120515584009 + -5.70548764216065 * H2_1 + 1.68662001376142 * H2_2 + 0.258501500910179 * H2_3 + -0.847708113557714 * H2_4));

H1_2 = tanh((0.352070490931413 + -0.970557416759893 * H2_1 + 0.111413979137083 * H2_2 + 0.0825574070825275 * H2_3 + -0.131379090498793 * H2_4));

H1_3 = tanh((-0.74543467433794 + -4.72625149629251 * H2_1 + 0.037737780640301 * H2_2 + -3.89677600361731 * H2_3 + -0.168939279501608 * H2_4));

H1_4 = tanh((-1.81968310536889 + -4.65807401421712 * H2_1 + -0.533030296945447 * H2_2 + -3.4923778285641 * H2_3 + -0.209836225369962 * H2_4));

PREDICTED_BOAT_TRIP_LOSS = -1957.74153866286 + -1348.08536010208 * H1_1 + 596.04843733566 * H1_2 + 557.429477185031 * H1_3 + -1019.53938923129 * H1_4;


H2_1 = tanh((-49.6773212910996 + 0.067499910879966 * CRUISESPEED + 10.355252857174 * FLEETSIZE + -2.01319236761418 * LOADTHRESHOLD + 1.77907584202644 * PAYLOAD));

H2_2 = tanh((3.32168643807158 + -0.0393230344533101 * CRUISESPEED + -1.73638317473192 * FLEETSIZE + -0.039823674148481 * LOADTHRESHOLD + -0.048309399513551 * PAYLOAD));

H2_3 = tanh((-3.43517717964036 + 0.010371706069609 * CRUISESPEED + 0.419762224307499 * FLEETSIZE + 0.261186053204259 * LOADTHRESHOLD + 0.395334985950087 * PAYLOAD));

H2_4 = tanh((0.310948258113498 + -0.00149489503458741 * CRUISESPEED + -0.184959661999454 * FLEETSIZE + 2.09766721182541 * LOADTHRESHOLD + -2.54981530615388 * PAYLOAD));

H1_1 = tanh((10.0406413271471 + -13.5741302249312 * H2_1 + 3.18457513420885 * H2_2 + 0.14581818577433 * H2_3 + 25.7791944701492 * H2_4));

H1_2 = tanh((4.50686737978865 + -4.69865669733891 * H2_1 + -0.0142392040066755 * H2_2 + -5.03955771325276 * H2_3 + 13.4623116215867 * H2_4));

H1_3 = tanh((-12.3879047638055 + -0.033986257448533 * H2_1 + -2.61832661314075 * H2_2 + -0.548859338879093 * H2_3 + 4.91054374688712 * H2_4));

H1_4 = tanh((-10.6756223172915 + -0.0267499459112583 * H2_1 + -1.63788153444608 * H2_2 + 0.164126981082441 * H2_3 + -9.15299994828011 * H2_4));

PREDICTED_CROP_LOSS = 310.759536355119 + -460.672909453504 * H1_1 + -563.37239984723 * H1_2 + 777.058416111181 * H1_3 + 521.692871947183 * H1_4;


H2_1 = tanh((1.45988648961371 + -0.0000000972550245929 * CRUISESPEED + -0.399357006531631 * FLEETSIZE + -0.0000045867247004581 * LOADTHRESHOLD + 0.0153815380749765 * PAYLOAD));

H2_2 = tanh((-1.02793907646275 + -0.000000604867026154 * CRUISESPEED + 0.151718833141775 * FLEETSIZE + -0.0000224183640501757 * LOADTHRESHOLD + -0.0879276337839743 * PAYLOAD));

H2_3 = tanh((-0.404810839076549 + -0.0000000128695635422 * CRUISESPEED + 0.0476604110427565 * FLEETSIZE + -0.0000009692977605798 * LOADTHRESHOLD + 0.00687894295019334 * PAYLOAD));

H2_4 = tanh((-1.24783615959947 + 0.0000000451340360304 * CRUISESPEED + 0.530341467741674 * FLEETSIZE + 0.000000797262859874 * LOADTHRESHOLD + 0.0127698775095424 * PAYLOAD));

H1_1 = tanh((-1.06313849541784 + -1.26972000258644 * H2_1 + -3.60371617063085 * H2_2 + -3.37441598778157 * H2_3 + 0.0886872771377545 * H2_4));

H1_2 = tanh((0.622521443224897 + 0.749254102475275 * H2_1 + 0.0167212791108354 * H2_2 + -2.66000439297417 * H2_3 + -0.518616558374723 * H2_4));

H1_3 = tanh((-0.519931648564007 + 1.05173869617631 * H2_1 + -0.221620410019535 * H2_2 + -0.664253146695611 * H2_3 + 0.598677260372294 * H2_4));

H1_4 = tanh((-0.212636648719735 + 1.44001109939162 * H2_1 + 2.11059143834558 * H2_2 + -0.619562187216669 * H2_3 + 0.429760155343458 * H2_4));

PREDICTED_FOREST_LOSS = 2980.98121601659 + 26734.6727683166 * H1_1 + -31757.143288989 * H1_2 + 27613.2403973945 * H1_3 + 8532.26248467395 * H1_4;


H2_1 = tanh((3.07872334141414 + -0.00789318889499493 * CRUISESPEED + -0.68635468239793 * FLEETSIZE + -0.403679694097385 * LOADTHRESHOLD + -0.000767391780450711 * PAYLOAD));

H2_2 = tanh((3.31760798011552 + -0.0174928061553069 * CRUISESPEED + -0.105635940529034 * FLEETSIZE + 0.144757593277488 * LOADTHRESHOLD + -0.0257389290886752 * PAYLOAD));

H2_3 = tanh((5.60299119698027 + -0.100340427001291 * CRUISESPEED + -2.37940648097532 * FLEETSIZE + -0.951574340394171 * LOADTHRESHOLD + -0.0174818610759067 * PAYLOAD));

H2_4 = tanh((3.08068867468566 + -0.00801818870225103 * CRUISESPEED + -0.677285856914319 * FLEETSIZE + -0.0792341911990679 * LOADTHRESHOLD + -0.34046145317611 * PAYLOAD));

H1_1 = tanh((0.351147487200804 + -0.0397684316033491 * H2_1 + -0.68926905836318 * H2_2 + 0.131459451794828 * H2_3 + 0.0367431056870882 * H2_4));

H1_2 = tanh((3.46044126972781 + -0.697830639069583 * H2_1 + 2.32651737422773 * H2_2 + -0.494344559834155 * H2_3 + 3.75127073880569 * H2_4));

H1_3 = tanh((-0.260334807900221 + 0.118923512929185 * H2_1 + -4.89806317998254 * H2_2 + 0.668949032728212 * H2_3 + -4.80685699778384 * H2_4));

H1_4 = tanh((0.0120117257807431 + 10.7476934420708 * H2_1 + 1.12998103699839 * H2_2 + 0.110605203258612 * H2_3 + -10.8396206371566 * H2_4));

PREDICTED_INCOME = -2207560.51026402 + -2288910.58187974 * H1_1 + -3111053.62411224 * H1_2 + -525676.290290416 * H1_3 + 5003860.87535332 * H1_4;


H2_1 = tanh((-4.53538129934372 + -0.00848382589400692 * CRUISESPEED + 0.133260383176268 * FLEETSIZE + 7.22929843750825 * LOADTHRESHOLD + -3.04852676654393 * PAYLOAD));

H2_2 = tanh((1.05411526759533 + -0.0102354950206144 * CRUISESPEED + -0.227114865426805 * FLEETSIZE + -0.00199539473350029 * LOADTHRESHOLD + -0.4841462784149 * PAYLOAD));

H2_3 = tanh((10.6999602114316 + 0.0359664544881015 * CRUISESPEED + -6.78616442232867 * FLEETSIZE + -4.15378382090978 * LOADTHRESHOLD + -0.0688360803049274 * PAYLOAD));

H2_4 = tanh((12.2828700591065 + -0.185219008816331 * CRUISESPEED + -6.63831244614473 * FLEETSIZE + 0.138453825899482 * LOADTHRESHOLD + 0.00629879638691124 * PAYLOAD));

H1_1 = tanh((-3.86948317018613 + -3.0398143964148 * H2_1 + -4.92255155392474 * H2_2 + 0.39006536600608 * H2_3 + 2.73773819955127 * H2_4));

H1_2 = tanh((-37.8282241187685 + -35.9657771193893 * H2_1 + -2.82031483586258 * H2_2 + -0.47473063939419 * H2_3 + -0.512294312776178 * H2_4));

H1_3 = tanh((-25.6191868367133 + -16.8350585331997 * H2_1 + -4.68088216159208 * H2_2 + 0.186844546061545 * H2_3 + -3.18387119450535 * H2_4));

H1_4 = tanh((13.9258469849614 + -2.11198759629499 * H2_1 + 5.88484326405222 * H2_2 + 2.93815813819762 * H2_3 + -1.44488647939623 * H2_4));

PREDICTED_TIME_SAVINGS = 7663.38793608455 + 82.094771281757 * H1_1 + 3231.26318475998 * H1_2 + 2406.61683539503 * H1_3 + -486.212256053424 * H1_4;

% normalize impacts based on simulation max and mins
bshift = 0;
bnorm = 3260 + bshift;
cshift = 2554;
cnorm = cshift + 658;
fshift = -582;
fnorm = 25000 + fshift;
ishift = 290000;
inorm = ishift + 1384000;
tshift = 1588;
tnorm = 8411 + tshift;

BoatJobLoss = ((PREDICTED_BOAT_TRIP_LOSS) + bshift) /(bnorm);

Crops = ((PREDICTED_CROP_LOSS) + cshift)/(cnorm);

ForestLoss = ((PREDICTED_FOREST_LOSS) + fshift)/(fnorm);

Income = ((PREDICTED_INCOME) + ishift)/(inorm);

TimeSavings = ((PREDICTED_TIME_SAVINGS) + tshift)/ (tnorm);

% weight and sum impacts
f = wB * BoatJobLoss + wC * Crops + wF * ForestLoss + wI * Income + wT * TimeSavings;
end


function [c,ceq] = nlc(x)
% No constraints needed to define feasible space since cities are close
%   enough that all designs are feasible
Payload = round(x(1));
CruiseSpeed = round(x(2));
FleetSize = round(x(3));
PayloadFraction = 0.3;
FuelTankFraction = 0.05;
FinenessRatio = 3;
ConstraintSize = 81000;


% footprint constraint
totalLift_lb = 2000 * Payload / PayloadFraction;
liftLbPerCubicFoot = 0.06; % helium
specificDensity = 0.95; % at ~1500 ft
airshipVolume_ft3 = (totalLift_lb / liftLbPerCubicFoot) / specificDensity;
diameter_ft = 0.3048 * (4*airshipVolume_ft3 / (0.6 * pi * FinenessRatio))^(1/3) % m # not using percent cylinder
length_ft = diameter_ft * FinenessRatio % m
footprint_ft2 = length_ft * diameter_ft;

FootprintConstraint = footprint_ft2 * FleetSize * 1.1 - ConstraintSize; % this equivalent to forrestloss being below a size


c(:,1) = FootprintConstraint;
ceq = [];
end




















